generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  password           String
  image              String?
  themePreference    String?   @default("system")
  spellingPreference String    @default("UK")
  fontPreference     String?   @default("sans")
  lastActiveNoteId   String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  accounts           Account[]
  folios             Folio[]
  sessions           Session[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folio {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folders   Folder[]
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  notes     Note[]

  @@index([ownerId])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  folioId   String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folio     Folio    @relation(fields: [folioId], references: [id], onDelete: Cascade)
  parent    Folder?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[] @relation("FolderChildren")
  notes     Note[]

  @@index([folioId])
  @@index([parentId])
}

model Note {
  id        String          @id @default(cuid())
  title     String          @default("Untitled")
  content   Json            @default("{}")
  folioId   String
  folderId  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  folder    Folder?         @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folio     Folio           @relation(fields: [folioId], references: [id], onDelete: Cascade)
  published PublishedPage?

  @@index([folioId])
  @@index([folderId])
  @@index([updatedAt])
}

model PublishedPage {
  id          String    @id @default(cuid())
  noteId      String    @unique
  note        Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  slug        String    @unique
  shortId     String    @unique
  customSlug  Boolean   @default(false)

  // Publishing settings
  isPublished Boolean   @default(true)
  publishedAt DateTime  @default(now())
  lastUpdated DateTime  @updatedAt

  // SEO metadata (for Story 3.2)
  metaTitle       String? @db.Text
  metaDescription String? @db.Text
  ogImage         String?

  // Analytics (for Story 3.3)
  viewCount  Int       @default(0)
  lastViewed DateTime?

  @@index([slug])
  @@index([shortId])
  @@index([noteId])
  @@index([publishedAt])
}
