// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String    // Hashed password
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  folios   Folio[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Folio {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  folders Folder[]
  notes   Note[]

  @@index([ownerId])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  folioId   String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folio    Folio    @relation(fields: [folioId], references: [id], onDelete: Cascade)
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderHierarchy")
  notes    Note[]

  @@index([folioId])
  @@index([parentId])
}

model Note {
  id        String   @id @default(cuid())
  title     String   @default("Untitled")
  content   Json     @default("{}")
  folioId   String
  folderId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folio  Folio   @relation(fields: [folioId], references: [id], onDelete: Cascade)
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@index([folioId])
  @@index([folderId])
  @@index([updatedAt])
}
